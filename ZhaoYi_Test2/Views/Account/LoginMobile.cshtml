@using Microsoft.AspNetCore.Identity
@model ZhaoYi_Test2.ViewModels.LoginViewModel
@inject SignInManager<ApplicationUser> SignInManager
@{
    ViewData["Title"] = "Đăng nhập";
    Layout = "~/Views/Shared/_MobileLayout.cshtml";
    ViewData["ShowBottomNav"] = false;

    // Lấy danh sách các nhà cung cấp đăng nhập bên ngoài (Google, Facebook...)
    var externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToList();
}

@section Styles {
    <link rel="stylesheet" href="~/css/login.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/global-mobile.css" asp-append-version="true" />
    <style>

        .mobile-screen {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        /* Validation Summary Errors (ModelOnly) */
        .validation-summary-errors {
            color: #d9534f; /* Màu đỏ bootstrap */
            background-color: rgba(217, 83, 79, 0.1);
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 20px;
            width: 100%;
            font-size: 14px;
        }

            .validation-summary-errors ul {
                list-style-type: none;
                padding: 0;
                margin: 0;
            }

        /* Field-specific Errors */
        .field-validation-error {
            color: #dc3545;
            font-size: 0.8rem;
            display: block;
            width: 100%;
            padding-left: 5px;
            padding-right: 5px;
            text-align: right;
            margin-bottom: 15px;
        }


        /* Thông báo thành công */
        .success-message {
            background-color: rgba(76, 175, 80, 0.1);
            color: #4CAF50;
            padding: 10px;
            border-radius: 8px;
            font-size: 14px;
            margin-bottom: 20px;
            width: 100%;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .success-message i {
                margin-right: 8px;
            }
    </style>
}

<div class="content-wrapper">
    <h1 class="login-title">Đăng nhập</h1>
    <div class="title-underline"></div>
    <p class="subtitle">Vui lòng đăng nhập vào tài khoản của bạn để tiếp tục với ứng dụng</p>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="success-message"> <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"] </div>
    }

    @* --- Validation Summary cho lỗi chung --- *@
    <div asp-validation-summary="ModelOnly" class="text-danger validation-summary-errors"></div>

    @* Hiển thị lỗi từ TempData nếu có (ví dụ: lỗi từ External Login) *@
    @if (TempData["LoginErrors"] is List<string> errors && errors.Any())
    {
        <div class="validation-summary-errors">
            <ul>
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        </div>
    }


    <form asp-controller="Account" asp-action="Login" method="post" style="width: 100%;" id="loginForm">
        @Html.AntiForgeryToken()
        <input type="hidden" name="returnUrl" value="@ViewData["ReturnUrl"]" />

        @* --- Container cho Email --- *@
        <div class="form-field-container">
            <div class="input-group">
                @* Sẽ thêm class 'input-group-error' bằng JS *@
                <i class="far fa-envelope"></i>
                <input type="email" asp-for="Email" placeholder="Email của bạn" class="form-control" data-val="true">
            </div>
            <span asp-validation-for="Email" class="text-danger field-validation-valid"></span>
        </div>

        @* --- Container cho Password --- *@
        <div class="form-field-container">
            <div class="input-group">
                @* Sẽ thêm class 'input-group-error' bằng JS *@
                <i class="fas fa-lock"></i>
                <input type="password" id="passwordInput" asp-for="Password" placeholder="Mật khẩu của bạn" class="form-control" data-val="true">
                <i class="fas fa-eye-slash icon-right" id="togglePassword"></i>
            </div>
            <span asp-validation-for="Password" class="text-danger field-validation-valid"></span>
        </div>

        @* --- Container cho Options Row (không cần container riêng nếu đã style margin) --- *@
        <div class="login-options-row">
            <div class="remember-me-group">
                <input type="checkbox" id="rememberMe" asp-for="RememberMe" checked="checked">
                <label for="rememberMe">Ghi nhớ đăng nhập</label>
            </div>
            <a href="#" class="forgot-password">Quên mật khẩu?</a>
        </div>

        <button type="submit" class="btn-primary">Đăng nhập</button>
    </form>

    @* Phần đăng nhập mạng xã hội giữ nguyên *@
    @if (externalLogins.Count > 0)
    {
        <div class="separator">HOẶC</div>
        <form asp-controller="Account" asp-action="ExternalLogin" asp-route-returnUrl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal" style="width: 100%;">
            @Html.AntiForgeryToken()
            <div>
                @foreach (var provider in externalLogins)
                {
                    if (provider.Name.ToLower() == "google")
                    {
                        <button type="submit" class="btn-social google" name="provider" value="@provider.Name" title="Đăng nhập với tài khoản @provider.DisplayName của bạn">
                            <img src="~/images/ic_google.png" alt="Google logo" width="18" height="18" />
                            <span>Đăng nhập với @provider.DisplayName</span>
                        </button>
                    }
                    // ... (các provider khác) ...
                }
            </div>
        </form>
    }

    <p class="signup-link">
        Bạn không có tài khoản? <a asp-controller="Account" asp-action="Register">Đăng ký</a>
    </p>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const togglePassword = document.getElementById('togglePassword');
            const passwordInput = document.getElementById('passwordInput');
            if (togglePassword && passwordInput) {
                togglePassword.addEventListener('click', function () {
                    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    passwordInput.setAttribute('type', type);
                    this.classList.toggle('fa-eye');
                    this.classList.toggle('fa-eye-slash');
                });
            }

            // --- JAVASCRIPT CẬP NHẬT CLASS LỖI CHO PARENT ---
            const form = document.getElementById('loginForm');
            if (form) {
                const inputsToValidate = form.querySelectorAll('input[data-val="true"]');

                // Hàm cập nhật trạng thái lỗi cho input group cha
                function updateInputGroupErrorState(inputElement) {
                    const inputGroup = inputElement.closest('.input-group');
                    const validationMessageSpan = form.querySelector(`span[data-valmsg-for="${inputElement.name}"]`);

                    if (!inputGroup || !validationMessageSpan) return;

                    // Kiểm tra class của SPAN lỗi
                    const hasError = validationMessageSpan.classList.contains('field-validation-error') &&
                                     !validationMessageSpan.classList.contains('field-validation-valid');

                    if (hasError) {
                        inputGroup.classList.add('input-group-error');
                        // Không cần set visibility nữa nếu dùng display: none cho valid
                    } else {
                        inputGroup.classList.remove('input-group-error');
                    }
                }

                // 1. Kiểm tra lỗi ban đầu khi trang load (server-side)
                inputsToValidate.forEach(input => {
                    updateInputGroupErrorState(input);
                });

                // 2. Sử dụng MutationObserver để theo dõi thay đổi class của SPAN lỗi
                 const observer = new MutationObserver(mutationsList => {
                     mutationsList.forEach(mutation => {
                         if (mutation.type === 'attributes' && mutation.attributeName === 'class' && mutation.target.tagName === 'SPAN') {
                              const inputName = mutation.target.getAttribute('data-valmsg-for');
                              const inputElement = form.querySelector(`[name="${inputName}"]`);
                              if (inputElement) {
                                  updateInputGroupErrorState(inputElement);
                              }
                         }
                     });
                 });

                // Bắt đầu observe mỗi SPAN validation message
                 const validationSpans = form.querySelectorAll('span[data-valmsg-for]');
                 validationSpans.forEach(span => {
                     observer.observe(span, { attributes: true });
                     // Gọi update lần đầu để set trạng thái ban đầu
                      const inputElement = form.querySelector(`[name="${span.getAttribute('data-valmsg-for')}"]`);
                       if(inputElement) {
                            updateInputGroupErrorState(inputElement);
                       }
                 });
            }
        });
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    } 

}

