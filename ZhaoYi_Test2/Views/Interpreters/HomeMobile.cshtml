@model List<ZhaoYi_Test2.Models.JobPosting>
@{
    ViewData["Title"] = "Trang chủ Phiên dịch viên";
    Layout = "~/Views/Shared/_MobileLayout.cshtml";
    ViewData["UserRole"] = "Interpreter"; // or "Recruiter" or any other value
    ViewData["ShowBottomNav"] = true;
}

@section Styles {
    <link rel="stylesheet" href="~/css/interpreter-dashboard.css" />
    <link rel="stylesheet" href="~/css/shared-nav.css" />
    <link rel="stylesheet" href="~/css/job-card.css" />
}

<!-- Header -->
<div class="top-header">
    <div class="header-controls">
        <div class="search-bar">
            <i class="fas fa-search"></i>
            <input type="text" placeholder="Tìm kiếm..." />
        </div>
        <button class="filter-btn">
            <span class="filter-icon"><span></span><span></span><span></span></span> <!-- Simple icon -->
            Bộ lọc
        </button>
        <button class="notification-btn">
            <i class="fas fa-bell"></i>
            <span class="badge"></span> <!-- Notification dot -->
        </button>
    </div>
    <!-- Urgent Banner (Positioned absolutely) -->
    <div class="urgent-banner" id="openUrgentSearchBtn">
        <i class="fas fa-bolt"></i>
        <span>TÌM VIỆC PHIÊN DỊCH VIÊN CẤP TỐC</span>
    </div>
</div>

<!-- Main Scrollable Content -->
<div class="main-content">

    <!-- Urgent Jobs Section -->
    <div class="job-section">

        <div class="urgent-job-section-wrapper">
            <h2 class="section-title"><i class="fas fa-fire"></i>Bài đăng tuyển dụng gấp</h2>

            <div class="urgent-job-container">
                @{
                    var urgentJobs = ViewBag.UrgentJobs as List<ZhaoYi_Test2.Models.JobPosting> ?? new List<ZhaoYi_Test2.Models.JobPosting>();

                    if (urgentJobs.Any())
                    {
                        foreach (var job in urgentJobs)
                        {
                            <partial name="_JobCard" model="job" />
                        }
                    }
                    else
                    {
                        var defaultJob = new ZhaoYi_Test2.Models.JobPosting
                        {
                            JobPostingId = 1,
                            Title = "Phiên dịch viên tiếng Trung",
                            Field = "Thương mại",
                            WorkLocation = "Hoàng Mai, Hà Nội",
                            ExpiryDate = DateTime.Now.AddHours(5),
                            IsUrgent = true
                        };
                        <partial name="_JobCard" model="defaultJob" />
                    }
                }
            </div>
        </div>
        <div class="scroll-indicator"></div>
    </div> <!-- <<===== KẾT THÚC urgent-job-section-wrapper -->
    <!-- Recommended Jobs Section -->
    <div class="job-section">
        <h2 class="section-title">Bài đăng dành cho bạn</h2>

        @{
            var recommendedJobs = ViewBag.RecommendedJobs as List<ZhaoYi_Test2.Models.JobPosting> ?? new List<ZhaoYi_Test2.Models.JobPosting>();

            if (recommendedJobs.Any())
            {
                foreach (var job in recommendedJobs)
                {
                    <partial name="_JobCard" model="job" />
                }
            }
            else
            {
                var defaultJob = new ZhaoYi_Test2.Models.JobPosting
                {
                    JobPostingId = 2,
                    Title = "Phiên dịch viên tiếng Anh",
                    Field = "Công nghệ thông tin",
                    WorkLocation = "Cầu Giấy, Hà Nội",
                    ExpiryDate = DateTime.Now.AddHours(23),
                    IsUrgent = false
                };
                <partial name="_JobCard" model="defaultJob" />
            }
        }
    </div>
</div>



<!-- Modal cho tìm việc cấp tốc -->
<div class="modal-overlay" id="urgentSearchModal">
    <div class="modal-content">
        <!-- Banner thông báo tính năng đang phát triển -->
        <div class="development-banner">
            <i class="fas fa-tools"></i>
            <span>TÍNH NĂNG ĐANG PHÁT TRIỂN</span>
        </div>
        
        <div class="modal-header-banner">
            <i class="fas fa-bolt"></i>
            Tìm việc phiên dịch viên cấp tốc
        </div>

        <div class="modal-body">
            <p class="modal-description">
                Tìm việc phiên dịch viên ngay lập tức trong khu vực của bạn.
                Nhận kết quả phù hợp trong vài phút!
            </p>

            <h3 class="modal-section-title">Bạn đang ở đâu?</h3>
            <div class="location-box">
                <span class="location-icon-bg">
                    <i class="fas fa-map-marker-alt"></i>
                </span>
                <span class="location-text">Quận Hoàng Mai, Hà Nội</span>
            </div>
            <a href="#" class="filter-link">Thay đổi vị trí <i class="fas fa-chevron-right"></i></a>

            <h3 class="modal-section-title">Chi phí dịch vụ:</h3>
            <p class="cost-info">2 <span class="highlight-points">điểm</span> cho mỗi lần sử dụng</p>
            
            <p class="balance-info">Số dư: <span class="highlight-points">10 điểm</span></p>
            <a href="#" class="buy-more-link">Mua thêm điểm</a>
        </div>

        <div class="modal-footer">
            <button class="btn-confirm" id="confirmUrgentSearchBtn">ĐÓNG</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Add JS for interactions like bookmarking, filtering, notifications etc.
        document.querySelectorAll('.bookmark-btn').forEach(button => {
            button.addEventListener('click', (event) => {
                event.preventDefault(); // Prevent link navigation if inside <a>
                event.stopPropagation(); // Stop click from bubbling to the card link
                button.classList.toggle('saved');
                const icon = button.querySelector('i');
                icon.classList.toggle('far'); // Toggle between regular
                icon.classList.toggle('fas'); // and solid bookmark icon
                // Add AJAX call here to save/unsave bookmark state
                console.log('Bookmark toggled');
            });
        });

        // Enable horizontal scrolling with mouse wheel for urgent job container
        const urgentJobContainer = document.querySelector('.urgent-job-container');
        if (urgentJobContainer) {
            urgentJobContainer.addEventListener('wheel', (event) => {
                // Prevent the default vertical scroll
                event.preventDefault();

                // Scroll horizontally instead of vertically
                urgentJobContainer.scrollLeft += event.deltaY;
            }, { passive: false });

            // Make job cards draggable for touch and mouse
            let isDragging = false;
            let startPosition = 0;
            let scrollLeft = 0;

            urgentJobContainer.addEventListener('mousedown', (event) => {
                isDragging = true;
                startPosition = event.pageX - urgentJobContainer.offsetLeft;
                scrollLeft = urgentJobContainer.scrollLeft;
                urgentJobContainer.style.cursor = 'grabbing';
            });

            urgentJobContainer.addEventListener('mouseleave', () => {
                isDragging = false;
                urgentJobContainer.style.cursor = 'grab';
            });

            urgentJobContainer.addEventListener('mouseup', () => {
                isDragging = false;
                urgentJobContainer.style.cursor = 'grab';
            });

            urgentJobContainer.addEventListener('mousemove', (event) => {
                if (!isDragging) return;
                event.preventDefault();
                const x = event.pageX - urgentJobContainer.offsetLeft;
                const walk = (x - startPosition) * 2; // Scroll speed multiplier
                urgentJobContainer.scrollLeft = scrollLeft - walk;
            });

            // Set initial cursor style
            urgentJobContainer.style.cursor = 'grab';
        }

        // JS cho Modal tìm việc cấp tốc
        const openModalButton = document.getElementById('openUrgentSearchBtn');
        const urgentSearchModal = document.getElementById('urgentSearchModal');
        const confirmButton = document.getElementById('confirmUrgentSearchBtn');

        if (openModalButton && urgentSearchModal) {
            // Hàm để mở modal
            const openModal = () => {
                urgentSearchModal.classList.add('active');
            };

            // Hàm để đóng modal
            const closeModal = () => {
                urgentSearchModal.classList.remove('active');
            };

            // Sự kiện để mở modal
            openModalButton.addEventListener('click', openModal);

            // Sự kiện để đóng modal khi nhấn vào overlay (bên ngoài content)
            urgentSearchModal.addEventListener('click', (event) => {
                // Kiểm tra xem click có phải vào overlay
                if (event.target === urgentSearchModal) {
                    closeModal();
                }
            });

            // Sự kiện khi nhấn nút xác nhận
            if (confirmButton) {
                confirmButton.addEventListener('click', () => {
                    console.log("Đã nhấn nút xác nhận - xử lý hành động và đóng modal");
                    // Thêm AJAX call hoặc xử lý logic xác nhận ở đây
                    closeModal();
                });
            }

            // Đóng modal bằng phím Escape
            document.addEventListener('keydown', (event) => {
                if (event.key === 'Escape' && urgentSearchModal.classList.contains('active')) {
                    closeModal();
                }
            });
        }

        // Update current time in status bar
        function updateTime() {
            const now = new Date();
            const hours = now.getHours().toString().padStart(2, '0');
            const minutes = now.getMinutes().toString().padStart(2, '0');
            document.querySelector('.status-bar .time').textContent = `${hours}:${minutes}`;
        }

        // Update time every minute
        updateTime();
        setInterval(updateTime, 60000);
    </script>
}
